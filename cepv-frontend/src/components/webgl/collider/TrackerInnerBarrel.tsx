/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 Tracker_Inner_Barrel.glb --transform -o TrackerInnerBarrel.tsx -t 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { ColliderPart } from '../../../data/ColliderParts'

type GLTFResult = GLTF & {
  nodes: {
    Tracker_Inner_Barrel: THREE.Mesh
  }
  materials: {}
  animations: []
}

interface PartProps {
  part: ColliderPart;
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function TrackerInnerBarrel(props: PartProps) {
  const { nodes, materials } = useGLTF('/models/Tracker_Inner_Barrel-transformed.glb') as GLTFResult
  if (!props.part.enabled) {
    return;
  }
  return (
    <group dispose={null}>
      <mesh geometry={nodes.Tracker_Inner_Barrel.geometry} position={[-0.24, -0.002, 0.002]} rotation={[Math.PI / 2, 0, -Math.PI / 2]} >
        <meshStandardMaterial color={props.part.color} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/models/Tracker_Inner_Barrel-transformed.glb')
